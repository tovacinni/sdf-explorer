/******************************************************************************
 * The MIT License (MIT)
 * Copyright (c) 2021, NVIDIA CORPORATION.
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#version 410 or 430 // -*- c++ -*-
#ifdef GL_ARB_compute_variable_group_size
#extension GL_ARB_compute_variable_group_size : enable
#endif

#include <g3dmath.glsl>

uniform sampler2D uniformRandom3d;
#define rand(coord) texture2D(uniformRandom3d, coord)
uniform sampler2D gaussianRandom3d;
#define gaussian(coord) texture2D(gaussianRandom3d, coord)

#include "App_raycast.glsl"

#include ACTIVE_SHADER

layout(local_size_variable) in;

layout(std430, binding = 0) restrict writeonly buffer DistanceSSBO {
    vec4 distance[];
};

layout(std430, binding = 1) restrict writeonly buffer NormalSSBO {
    vec4 normal[];
};

/** Mean Curvature of point p
  Based on https://www.shadertoy.com/view/Xts3WM
*/
float sdf_curv(Point3 p)
{
    vec3 e = vec3(1.0/32.0, 0, 0);

    float t1 = distanceToSurface(p + e.xyy), t2 = distanceToSurface(p - e.xyy);
    float t3 = distanceToSurface(p + e.yxy), t4 = distanceToSurface(p - e.yxy);
    float t5 = distanceToSurface(p + e.yyx), t6 = distanceToSurface(p - e.yyx);
    
    return .25/e.x*(t1 + t2 + t3 + t4 + t5 + t6 - 6.0*distanceToSurface(p));
}

vec4 sdf_normal(vec3 p) {
    const float minimumDistanceToSurface = 0.00003;
    const vec3 eps = vec3(minimumDistanceToSurface * 5.0, 0.0, 0.0);
    vec3 n = normalize(vec3(sdf_bounded(p + eps.xyz) - sdf_bounded(p - eps.xyz),
                            sdf_bounded(p + eps.yxz) - sdf_bounded(p - eps.yxz),
                            sdf_bounded(p + eps.zyx) - sdf_bounded(p - eps.zyx)));
    return vec4(n, sdf_bounded(p));
}

#include ACTIVE_SAMPLER

void main() {
    if (gl_GlobalInvocationID.x >= g3d_FragCoordExtent.x) {
        return;
    }
    int index = (int)gl_GlobalInvocationID.y * (int)g3d_FragCoordExtent.x + (int)gl_GlobalInvocationID.x;
    vec4 xyzd = sdf_sampler(gl_GlobalInvocationID.xy, (int)g3d_FragCoordExtent.x);
    distance[index] = xyzd;
    normal[index] = sdf_normal(xyzd.xyz);
}

