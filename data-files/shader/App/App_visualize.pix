/******************************************************************************
 * The MIT License (MIT)
 * Copyright (c) 2021, NVIDIA CORPORATION.
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#version 410 // -*- c++ -*-

/**
  Normalized SDF model ray marching shader, with isocontour and cutting plane visualization.
  By Towaki Takikawa and Morgan McGuire, NVIDIA, 2020
*/

#include <g3dmath.glsl>
#include <Camera/Camera.glsl>
#include <reconstructFromDepth.glsl>

uniform float groundPlaneHeight;


#include "App_raycast.glsl"

float hash(float n) { return frac(sin(n) * 1e4); }
float noise1_Point3(Point3 x) {
    const float3 step = float3(110, 241, 171);

    float3 i = floor(x);
    float3 f = frac(x);

    // For performance, compute the base input to a 1D hash from the integer part of the argument and the 
    // incremental change to the 1D based on the 3D -> 1D wrapping
    float n = dot(i, step);

    float3 u = f * f * (3.0 - 2.0 * f);
    return lerp(lerp(lerp(hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),
        lerp(hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),
        lerp(lerp(hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),
            lerp(hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);
}

uniform Camera camera;
uniform mat4x3 cutPlaneMatrix;
uniform sampler2D tmatcap;
uniform sampler2D tcolor;
uniform sampler2D tnormal;

out vec4 fragColor;

Point3 groundPoint = Point3(0, groundPlaneHeight, 0);
const Vector3 groundNormal = Point3(0, 1, 0);

////////////////////////////////////////////////////////////
// Scene configuration:

// = normalize(+1, +1, -1)
const Vector3 lightDirection = Point3(0.57735026919, 0.57735026919, -0.57735026919);

const Color3 keyLightColor = Color3(1.27, 1.21, 1.1) * 0.8;
const Color3 fillLightColor = Color3(0.05, 0.22, 0.8) * 1.2;

const Color3 backgroundGradientCenterColor = Color3(0.9, 0.9, 0.9) * 0.8;
const Color3 backgroundGradientRimColor = Color3(0.5, 0.45, 0.4) * 0.6;

const float cameraDistance = 5.0;

/*
// http://iquilezles.org/www/articles/boxfunctions/boxfunctions.htm
bool intersectAANormBox(Ray R, out float d) {
    const vec3 rad = vec3(1.,1.,1.); 
    vec3 m = 1.0/R.direction;
    vec3 n = m*R.origin;
    vec3 k = abs(m)*rad;
    vec3 t1 = -n - k;
    vec3 t2 = -n + k;

    float tN = max( max( t1.x, t1.y ), t1.z );
    float tF = min( min( t2.x, t2.y ), t2.z );
    d = tN;

    return !(tN>tF || tF<0.0);
}
*/

// From http://jcgt.org/published/0007/03/04/
bool intersectAANormBox(Ray R, out vec3 tmin, out vec3 tmax) {
    vec3 dir = (modelMatrix * vec4(R.direction, 1.0)).xyz;
    vec3 origin = (modelMatrix * vec4(R.origin, 1.0)).xyz;

    vec3 p0 = vec3(-1.0);
    vec3 p1 = vec3(1.0);
    vec3 invRayDirection = 1.0 / dir;
    vec3 t0 = (p0 - origin) * invRayDirection;
    vec3 t1 = (p1 - origin) * invRayDirection;
    tmin = min(t0, t1), tmax = max(t0, t1);
    return max(tmin.x, max(tmin.y, tmin.z)) <= min(tmax.x, min(tmax.y, tmax.z));
}

bool intersectPlanelet(Ray R, Point3 planePoint, Vector3 planeNormal, Vector3 planeUp, inout float dist) {
    float rate = -dot(R.direction, planeNormal);
    //if (rate < 0.) {
        // Behind the plane
    //  return false;
    //}
    if (abs(rate) < 0.00001) {
        // Parallel to the plane
        return false;
    }
    // Distance along the normal to travel to hit the plane
    float delta = dot(R.origin - planePoint, planeNormal);
    float t = delta / rate;

    Vector3 radius = (R.origin + (R.direction * t)) - planePoint;
    float projh = dot(radius, cross(planeNormal, planeUp));
    float proju = dot(radius, planeUp); 

    if ((t > 0.0) && (t < dist)) {
        // Test bounds
        if ((projh <  1.) &&
            (projh > -1.) &&
            (proju <  1.) &&
            (proju > -1.)){
            dist = t;
            return true;
        }
    } else {
        return false;
    }
}


bool intersectPlane(Ray R, Point3 planePoint, Vector3 planeNormal, inout float dist) {
    // Rate at which the ray approaches the plane                                                             
    float rate = -dot(R.direction, planeNormal);
    if (abs(rate) < 0.00001) {
        // Parallel to the plane
        return false;
    }

    // Distance along the normal to travel to hit the plane
    float delta = dot(R.origin - planePoint, planeNormal);
    float t = delta / rate;

    if ((t > 0.0) && (t < dist)) {
        dist = t;
        return true;
    } else {
        return false;
    }
}

/** Using a distance field for a ground plane during ray tracing is not a good idea--it takes a long time to */
float distanceToPlane(Point3 planePoint, Vector3 planeNormal, Point3 P) {
    P -= planePoint;
    return abs(dot(P, planeNormal));
}

////////////////////////////////////////////////////////////
// A small step, used for computing the surface normal
// by numerical differentiation. A scaled up version of
// this is also used for computing a low-frequency gradient.
const Vector3 eps = Vector3(minimumDistanceToSurface * 5.0, 0.0, 0.0);
const Vector3 neps = 3.0*eps;

/**
 Spherical Environment Map (SEM)
 Based on https://www.clicktorelease.com/blog/creating-spherical-environment-mapping-shader/
*/
Color3 sphericalEnvironmentMap(Vector3 e, Vector3 n) {
    e = g3d_WorldToCameraMatrix * Vector4(e, 0.0);
    n = g3d_WorldToCameraNormalMatrix * n;
    
    Vector3 r = reflect(e, n);
    float m = 2.0 * sqrt(square(r.x) + square(r.y) + square(r.z + 1.0));
    vec2 vN = r.xy / m + 0.5;
    vN = 1.0 - vN - vec2(0.01, 0.01);
    Color3 col = vec3(0.0, 0.0, 0.0);
    float noise = noise1_Point3(n * 1000.0) * 0.5 + 0.5;
    col = texture( tmatcap, vN.xy ).rgb;
    return col;
}

/**
 Triplanar Texture Mapping
*/
Color3 triplanar(Point3 p, Vector3 n) {
    Point3 vP = p * 0.5 + 0.5;
    // zy or yz?
    Color3 x = texture( tcolor, vP.zy ).rgb;
    Color3 y = texture( tcolor, vP.xz ).rgb;
    Color3 z = texture( tcolor, vP.xy ).rgb;
    Vector3 w = pow(abs(n), vec3(2.0, 2.0, 2.0));
    // is there faster way for this?
    return mat3(x,y,z) * w;
}

/**
 UDN Normal Mapping
 https://bgolus.medium.com/normal-mapping-for-a-triplanar-shader-10bf39dca05a#d655
*/
Vector3 normalmap(Point3 p, Vector3 n) {
    Point3 vP = p * 0.5 + 0.5;
    Vector3 x = texture( tnormal, vP.zy ).rgb * 2.0 - 1.0;
    Vector3 y = texture( tnormal, vP.xz ).rgb * 2.0 - 1.0;
    Vector3 z = texture( tnormal, vP.xy ).rgb * 2.0 - 1.0;
    // zy or yz?
    x = vec3(x.xy + n.zy, n.x);
    y = vec3(y.xy + n.xz, n.y);
    z = vec3(z.xy + n.xy, n.z);
    Vector3 w = pow(abs(n), vec3(2.0, 2.0, 2.0));
    return normalize(mat3(x.zyx, y.xzy, z.xyz) * w);
}

/** Mean Curvature of point p
  Based on https://www.shadertoy.com/view/Xts3WM
*/
float curv(Point3 p) {
    vec3 e = vec3(1.0/32.0, 0, 0);

    float t1 = distanceToSurface(p + e.xyy), t2 = distanceToSurface(p - e.xyy);
    float t3 = distanceToSurface(p + e.yxy), t4 = distanceToSurface(p - e.yxy);
    float t5 = distanceToSurface(p + e.yyx), t6 = distanceToSurface(p - e.yyx);
    
    return .25/e.x*(t1 + t2 + t3 + t4 + t5 + t6 - 6.0*distanceToSurface(p));
}

/** Ambient occlusion of surfel P, n.

 Based on Alex Evans. 2006. Fast approximations for global illumination on dynamic scenes,
 ACM SIGGRAPH 2006 Courses (SIGGRAPH '06). ACM, New York, NY, USA, 153-171. 
 http://dl.acm.org/citation.cfm?id$
 and http://www.iquilezles.org/www/material/nvscene2008/rwwtt.pdf
*/
float ambientVisibility(Point3 P, Vector3 n, bool modelVisible) {
    const int AO_ITERATIONS = 40;
    const float MAX_AO_RADIUS = 0.25 * meters;
    float a = 0.0;
    float weight = 3.5;
    float noise = noise1_Point3(P * 1000.0) * 0.5 + 0.5;
    float d0 = 0.0;// noise;
    for (int i = 1; i <= AO_ITERATIONS; ++i) {
        // Distance from the hit point to sample
        float d = MAX_AO_RADIUS * pow((float(i) + d0) / float(AO_ITERATIONS + 1), 1.6);

        Point3 Q = P + n * d;
        float r;
        if (bool(RENDER_GROUNDPLANE)) {
            r = min(distanceToSurface(Q), distanceToPlane(groundPoint, groundNormal, Q));
        } else if (modelVisible) {
            r = distanceToSurface(Q);
        } 
        
        a += weight * max(d - r - 0.005, 0.0);
        weight *= 0.84;
    }

    return clamp(1.0 - a, 0.1, 1.0);
}

Color3 trace(vec2 coord, in float maxDist, out float csZ) { 
    float csEyeRayDirectionZ;
    csZ = csEyeRayDirectionZ * maxDist;
    Ray eyeRay = worldRay(coord, camera.frame, camera.projInfo, csEyeRayDirectionZ);
    Point3 rayOrigin = eyeRay.origin;
    Vector3 rayDirection = normalize(eyeRay.direction);
    
    // Point on (technically, near) the model's surface
    Point3 X;

    bool hitPlane = false;
    bool hitCut = false;
    float cutDist = 20.0;

    float bbd = 0;
    vec3 btmin, btmax;
    bool hitBox = intersectAANormBox(eyeRay, btmin, btmax);
    
    if (bool(RENDER_GROUNDPLANE)) {
        hitPlane = intersectPlane(eyeRay, groundPoint, groundNormal, maxDist);  
    }
    float d;
    
    Point3 cutPoint;
    Vector3 cutNormal, cutUp;
    if (bool(RENDER_CUTPLANE)) {
        cutPoint = (cutPlaneMatrix * vec4(0, 0, 0, 1)).xyz;
        cutNormal = mat3x3(cutPlaneMatrix) * Vector3(0, 0, -1);
        cutUp     = mat3x3(cutPlaneMatrix) * Vector3(0, 1, 0);
        hitCut = intersectPlanelet(eyeRay, cutPoint, cutNormal, cutUp, cutDist);
    }

    if (! bool(RENDER_GROUNDPLANE) || ! hitPlane) {
        // Don't trace too far 
        maxDist = 20.0;
    }


    float t = 0;
    bool hitModel = false;

    //if (hitBox) {
    //hitModel = intersectSDF(btmin, rayDirection, maxDist, t, X);
    //}
    hitModel = intersectSDF(rayOrigin, rayDirection, maxDist, t, X);

    
    Color3 bgColor;
    if (bool(RENDER_WHITEBG)) {
        bgColor = vec3(1.0, 1.0, 1.0);
    } else {
        // No hit: return the background gradient       
        bgColor = mix(backgroundGradientCenterColor, 
                      backgroundGradientRimColor, 
                      sqrt(length((gl_FragCoord.xy / g3d_FragCoordExtent.xy - vec2(0.66, 0.66)) * 2.5)));
    }

    csZ = t;
    Color3 color;
    float albedo = 0.6;

    if (hitModel || (bool(RENDER_GROUNDPLANE) && hitPlane)) {
        Vector3 n = groundNormal;

        if (hitModel) {
            // Back away from the surface a bit before computing the gradient
            X -= rayDirection * eps.x * 5.0;

            // Surface normal
            n = normalize(
                Vector3(distanceToSurface(X + neps.xyz) - distanceToSurface(X - neps.xyz),
                        distanceToSurface(X + neps.yxz) - distanceToSurface(X - neps.yxz),
                        distanceToSurface(X + neps.zyx) - distanceToSurface(X - neps.zyx)));
        } else {
            albedo *= 0.5;
        }
        
        float AO = ambientVisibility(X, n, hitModel);

        Vector3 lightNormal = n;
        if (bool(RENDER_NORMALMAP)) {
            lightNormal = normalmap(X, n);
        }

        if (bool(RENDER_COLOR) && hitModel) {
            color = square(AO) * triplanar(X, n) * 
                    clamp(0.75 * dot(lightDirection, lightNormal) + 0.8, 0.0, 1.0);
        } else if (bool(RENDER_MATCAP) && hitModel) {
            color = square(AO) * sphericalEnvironmentMap(rayDirection, lightNormal);
        } else if (bool(RENDER_NORMAL) && hitModel) { 
            color = (lightNormal + 1.0) * 0.5;
        } else if (bool(RENDER_CURVATURE)) {
            color = vec3(1.0, 0.0, 0.0) * abs(curv(X));
        } else if (bool(RENDER_AO)) {
            color = square(AO) * vec3(1.0, 1.0, 1.0);
        } else if (!bool(RENDER_PLANECOLOR) && hitPlane && !hitModel ) {
            color = square(AO) * vec3(1.0,1.0,1.0);
        } else {
            // Compute AO term
            // Fade between the key and fill light based on the normal (Gooch-style wrap shading).
            // Also darken the surface in cracks (on top of the AO term)
            Vector3 analyticNormal = n;
            if (hitModel) {
                analyticNormal = lightNormal;
            }
            color = albedo * square(AO) * 
                    mix(fillLightColor, 
                        keyLightColor,
                        AO * clamp(0.7 * dot(lightDirection, analyticNormal) + 0.6, 0.0, 1.0));
        }
    } else {
        color = bgColor;
    } // if hit

    if (bool(RENDER_NORMBOX) && hitBox) { 
        color += 0.05; 
    }

    if (bool(RENDER_CUTPLANE) && hitCut && cutDist < maxDist) {
        Point3 cutX = rayOrigin + rayDirection * cutDist;
        float cutd = distanceToSurface(cutX);
        float normcutd = (clamp(distanceToSurface(cutX), -1.0, 1.0) + 1.0) * 0.5; // revise these
        vec3 cutColor;

        cutColor = Color3(0.0, 0.0, 1.0) * clamp(cutd, 0.0, 1.0) + 
                   Color3(0.4, 0.3, 0.0) * (1 - clamp(cutd, 0.0, 1.0));
        if (normcutd < 0.5) { cutColor = Color3(1.0, 0.38, 0.0); }

        for (int i = 0; i <= 64; ++i){
            if (abs(normcutd - (1.0 / 64.0 * i)) < 0.0015) {
                cutColor = vec3(0.75);
            }
        }

        if (abs(normcutd - 0.5) < 0.004) {
            cutColor = Color3(0.0, 0.0, 0.0);
        }

        if (hitModel && (cutDist > t) && bool(RENDER_SOLID)) { 
            color = color;
        } else if (hitModel && bool(RENDER_SOLID)) {
            color = 0.3 * color + 0.7 * cutColor;
        } else if (bool(RENDER_SOLID)) {
            color = cutColor;
        } else if (hitModel && cutDist > t) {
            color = 0.7 * color + 0.3 * cutColor;
            //color = cutColor;
        } else if (hitModel) {
            color = 0.3 * color + 0.7 * cutColor;
            //color = cutColor;
        } else {
            color = cutColor;
        }
        if (!bool(RENDER_WHITEBG) && !bool(RENDER_SOLID)) { color += 0.3 * bgColor; }
    
    } else if (bool(RENDER_CUTPLANE) && !bool(RENDER_SOLID) && !bool(RENDER_WHITEBG) && hitModel) { 
        color = (color + (hitPlane ? Color3(albedo) : bgColor)) * 0.5;
    }
    
    return color;
}


void main() {
    float maxDist = 1e6;
    float csZ;

    Color3 color;
    if (false) {
        // Supersample with 4x FSAA
        color =
            (trace(gl_FragCoord.xy + vec2(-0.125, -0.375), maxDist, csZ) +
             trace(gl_FragCoord.xy + vec2(+0.375, -0.125), maxDist, csZ) +
             trace(gl_FragCoord.xy + vec2(+0.125, +0.375), maxDist, csZ) +
             trace(gl_FragCoord.xy + vec2(-0.375, +0.125), maxDist, csZ)) / 4.0;
    } else {
        color = trace(gl_FragCoord.xy, maxDist, csZ);
    }
    gl_FragDepth = depthBufferValue(-csZ, camera.clipInfo);
    
    fragColor = Color4(color, 1.0);
}
