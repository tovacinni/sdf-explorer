/******************************************************************************
 * The MIT License (MIT)
 * Copyright (c) 2021, NVIDIA CORPORATION.
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#version 410 or 430 // -*- c++ -*-
#ifdef GL_ARB_compute_variable_group_size
#extension GL_ARB_compute_variable_group_size : enable
#endif

#include <g3dmath.glsl>
#include ACTIVE_SHADER

#include "App_raycast.glsl"


layout(local_size_variable) in;

layout(std430, binding = 10) restrict writeonly buffer FindMinSSBO {
    float min[];
};

void main() {
    float csEyeRayDirectionZ;
    if (gl_GlobalInvocationID.x >= g3d_FragCoordExtent.x) {
        return;
    }
    int index = (int)gl_GlobalInvocationID.y * (int)g3d_FragCoordExtent.x + (int)gl_GlobalInvocationID.x;
    float x = (index % (int)g3d_FragCoordExtent.x) / g3d_FragCoordExtent.x;
    float y = (index / (int)g3d_FragCoordExtent.x) / g3d_FragCoordExtent.y;

    vec3 rayOrigin = vec3(0.0, -2.0, 0.0);
    vec3 rayDirection = normalize(vec3(2.0 * x - 1.0, 1.0, 2.0 * y - 1.0));

    vec3 X;
    float t = 0.0;
    if (intersectSDF(rayOrigin, rayDirection, 3.0, t, X)) {
        min[index] = X.y;
    } else {
        min[index] = 1.0;
    }
}

